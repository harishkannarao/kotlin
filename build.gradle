buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm"
}

task pullDocker(type: Exec) {
    ignoreExitValue=false
    commandLine 'docker-compose', '-f', './docker_local/docker-compose.yml', '-p', 'kotlin_project', 'pull'
}

task startDocker(type: Exec) {
    ignoreExitValue=false
    commandLine 'docker-compose', '-f', './docker_local/docker-compose.yml', '-p', 'kotlin_project', 'up', '--build', '-d'
    mustRunAfter tasks.pullDocker
}

task stopDocker(type: Exec) {
    ignoreExitValue=false
    commandLine 'docker-compose', '-f', './docker_local/docker-compose.yml', '-p', 'kotlin_project', 'down', '-v'
}

task formatFiles(type: Exec) {
    ignoreExitValue=false
    commandLine 'docker-compose', '-f', './docker_local/docker-compose-format-files.yml', '-p', 'format_files', 'up', '--build', '-d'
}

task minifyFiles(type: Exec) {
    ignoreExitValue=false
    commandLine 'docker-compose', '-f', './docker_local/docker-compose-minify-files.yml', '-p', 'minify_files', 'up', '--build', '-d'
}

task copyAppToDocker(type: Copy) {
    from "ktor/build/libs/ktor-exec.jar"
    into "docker_local/ktor-application"
}

task copyWiremockToDocker(type: Copy) {
    from "wiremock-runner/build/libs/wiremock-runner-exec.jar"
    into "docker_local/wiremock"
}

allprojects {
    apply plugin: "java-library"
    apply plugin: "org.jetbrains.kotlin.jvm"

    repositories {
        jcenter()
        mavenCentral()
    }

    sourceCompatibility = "$javaVersion"

    compileKotlin {
        kotlinOptions.jvmTarget = "$javaVersion"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "$javaVersion"
    }

    kotlin {
    }

    configurations {
        implementation {
            exclude group: 'junit', module: 'junit'
            exclude group: 'org.webjars.npm', module: 'loose-envify'
        }
        testImplementation {
            exclude group: 'junit', module: 'junit'
        }
    }

    test {
        useTestNG {
            includeGroups = System.getProperty("testNgIncludeGroups", "").split(",").toList().toSet()
            excludeGroups = System.getProperty("testNgExcludeGroups", "").split(",").toList().toSet()
        }

        systemProperties = System.properties.stringPropertyNames().collectEntries {
            [(it): System.getProperty(it)]
        }
    }

    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
        implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
        testImplementation("org.testng:testng:$testNgVersion")
        testImplementation("org.hamcrest:hamcrest:$hamcrestVersion")
    }
}